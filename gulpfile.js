"use strict";

// Variables

var gulp = require("gulp");
var watch = require("gulp-watch");
var prefixer = require("gulp-autoprefixer");
var sass = require("gulp-sass");
var cssmin = require("gulp-clean-css");
var htmlmin = require("gulp-htmlmin");
var sitemap = require("gulp-sitemap");
var humans = require("gulp-humans");
var uglify = require("gulp-uglify");
var robots = require("gulp-robots");
var imagemin = require("gulp-imagemin");
var browsersync = require("browser-sync");
var reload = browsersync.reload;
var rimraf = require("rimraf");
var jslint = require("gulp-eslint");
var htmllint = require("gulp-htmlhint");
var sasslint = require("gulp-sass-lint");
var stylelint = require("gulp-stylelint");
var uncss = require("gulp-uncss");

// Path

var path = {
    build: {
        html: "build/",
        css: "build/css/",
        img: "build/img/",
        js: "build/js/",
    },
    src: {
        html: "src/*.html",
        style: "src/css/*.*ss",
        image: "src/img/**/*.*",
        script: "src/js/*.js",
    },
    watch: {
        html: "src/**/*.html",
        style: "src/css/**/*.scss",
        image: "src/img/**/*.*",
        script: "src/js/**/*.js",
    },
    clean: "./build",
};

// Everything's linting

gulp.task("lint", [
    "linthtml",
    "lintcss",
    "lintsass",
    "lintjs",
]);

// HTML linting

gulp.task("linthtml", function () {
    gulp.src(path.src.html)
    .pipe(htmllint())
    .pipe(reload({stream: true,}));
});

// CSS linting

gulp.task("lintcss", function () {
  gulp.src(path.build.css)
    .pipe(stylelint({
      reporters: [
        {formatter: "string", console: true}
      ]
    }))
    .pipe(reload({stream: true,}));
});

// SASS linting

gulp.task("lintsass", function () {
    gulp.src(path.src.style)
    .pipe(sasslint())
    .pipe(sasslint.format())
    .pipe(sasslint.failOnError())
    .pipe(reload({stream: true,}));
});

// JS linting

gulp.task("lintjs", function () {
    gulp.src(path.src.script)
    .pipe(jslint())
    .pipe(jslint.format())
    .pipe(jslint.failAfterError())
    .pipe(reload({stream: true,}));
});

// UnCSS

gulp.task("uncss", function () {
    gulp.src(path.build.css)
        .pipe(uncss({
        htmlroot     : '/build'
        }))
        .pipe(gulp.dest(path.build.css));
});

// Webserver config

var config = {
    server: {
        baseDir: "./build",
    },
    tunnel: true,
    host: "127.0.0.1",
    port: 4000,
    logPrefix: "localhost_server",
};

// HTML building

gulp.task("buildhtml", function () {
    gulp.src(path.src.html)
  .pipe(htmlmin({
      collapseBooleanAttributes: true,
      collapseInlineTagWhitespace: true,
      collapseWhitespace: true,
      decodeEntities: false,
      html5: true,
      includeAutoGeneratedTags: false,
      minifyCSS: true,
      minifyJS: true,
      minifyURLs: true,
      removeAttributeQuotes: true,
      removeComments: true,
      removeEmptyAttributes: true,
      removeEmptyElements: false,
      removeOptionalTags: false,
      removeRedundantAttributes: true,
      removeScriptTypeAttributes: true,
      removeStyleLinkTypeAttributes: true,
      removeTagWhitespace: true,
      sortAttributes: true,
      sortClassName: true,
      trimCustomFragments: true,
      useShortDoctype: true,
  }))
  .pipe(gulp.dest(path.build.html))
  .pipe(reload({stream: true,}));
});

// CSS building

gulp.task("buildcss", function () {
    gulp.src(path.src.style)
  .pipe(sass())
  .pipe(prefixer({ browsers: ["last 100 versions", "> 0.1%", "Firefox ESR",], }))
  .pipe(cssmin())
  .pipe(gulp.dest(path.build.css))
  .pipe(reload({stream: true,}));
});

// IMG building

gulp.task("buildimg", function () {
    gulp.src(path.src.image)
  .pipe(imagemin())
  .pipe(gulp.dest(path.build.img))
  .pipe(reload({stream: true,}));
});

// JS building

gulp.task("buildjs", function () {
    gulp.src(path.src.script)
  .pipe(uglify())
  .pipe(gulp.dest(path.build.js))
  .pipe(reload({stream: true,}));
});

// Everything building

gulp.task("build", [
    "buildhtml",
    "buildcss",
    "buildimg",
    "buildjs",
    "sitemap",
    "humans",
    "robots",
]);

// Cleaning

gulp.task("clean", function (cb) {
    rimraf(path.clean, cb);
});

// File watching

gulp.task("watch", function(){
    watch([path.watch.html,], function(event, cb) {
        gulp.start("buildhtml");
    });
    watch([path.watch.style,], function(event, cb) {
        gulp.start("buildcss");
    });
    watch([path.watch.image,], function(event, cb) {
        gulp.start("buildimg");
    });
    watch([path.watch.script,], function(event, cb) {
        gulp.start("buildjs");
    });
});

// Livereload

gulp.task("webserver", function () {
    browsersync(config);
});

// Default task

gulp.task("default", ["build", "webserver", "watch",]);

// Sitemap generating

gulp.task("sitemap", function () {
    gulp.src(path.src.html, {
        read: false,
    })
  .pipe(sitemap({
      siteUrl: "http://farriers.ru",
  }))
  .pipe(gulp.dest(path.build.html));
});

// humans.txt generating

gulp.task("humans", function () {
    gulp.src(path.src.html)
  .pipe(humans({
      team: [
          "Frontend, design: Dmitrij Podabed",
          "Email: dmitrij@podabed.org",
          "Site: podabed.org",
      ],
      thanks: [
          "stackoverflow.com",
          "fontawesome.io",
      ],
      site: [
          "Standards: HTML5, CSS3, JS",
          "Components: Normalize.css",
          "Software: Sublime text 3, Gulp, GIMP, Inkscape and many more",
      ],
  }))
  .pipe(gulp.dest(path.build.html));
});

// robots.txt generating

gulp.task("robots", function () {
    gulp.src(path.src.html)
  .pipe(robots({
      useragent: "*",
      allow: "/",
      disallow: "",
      sitemap: "http://farriers.ru/sitemap.xml",
  }))
  .pipe(gulp.dest(path.build.html));
});